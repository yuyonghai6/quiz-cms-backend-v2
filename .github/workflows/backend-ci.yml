name: CI/CD - Quiz CMS Backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # STAGE 1: Linting - First line of defense (Fail Fast)
  linting:
    name: Code Linting & Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Checkstyle
        run: mvn checkstyle:check
        continue-on-error: true

      - name: Run PMD
        run: mvn pmd:check
        continue-on-error: true

      - name: Upload Linting Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linting-reports
          path: |
            **/target/checkstyle-result.xml
            **/target/pmd.xml

  # STAGE 2: Build & Test - Only runs if linting passes
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: linting
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build backend and run tests
        run: mvn clean package

      - name: Upload test reports if tests fail
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/target/surefire-reports/
            **/target/allure-results/

      - name: Upload orchestration JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: orchestration-layer/target/*.jar

  # STAGE 3: SAST - Static Application Security Testing
  sast:
    name: SAST - Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone for SonarCloud

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run SpotBugs (requires compiled code)
        run: mvn compile spotbugs:check
        continue-on-error: true

      - name: OWASP Dependency-Check
        run: mvn verify dependency-check:check -DskipTests
        continue-on-error: true

      - name: Upload OWASP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -DskipTests \
            -Dsonar.projectKey=yuyonghai6_quiz-cms-backend-v2 \
            -Dsonar.organization=yuyonghai6 \
            -Dsonar.host.url=https://sonarcloud.io
        continue-on-error: true

  # STAGE 4: CodeQL - Advanced Static Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended,security-and-quality

      - name: Build for CodeQL
        run: mvn clean compile -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # STAGE 5: Security Gate - All security checks must pass
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [linting, build, sast, codeql]
    if: always()
    steps:
      - name: Check security status
        run: |
          echo "## 🛡️ Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.linting.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security gate logic - fail if any critical stage failed
          if [[ "${{ needs.linting.result }}" == "failure" ]]; then
            echo "❌ **Security Gate FAILED** - Linting errors found" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ **Security Gate FAILED** - Build/Test errors found" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "${{ needs.sast.result }}" == "failure" ]]; then
            echo "⚠️ **Security Gate WARNING** - SAST found issues (not blocking)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "⚠️ **Security Gate WARNING** - CodeQL found issues (not blocking)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security Gate PASSED** - Ready for deployment" >> $GITHUB_STEP_SUMMARY
          exit 0

  # STAGE 6: Deploy - Only runs if security gate passes on main branch
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./deploy

      - name: Display deployment info
        run: |
          echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**JAR files ready for deployment:**" >> $GITHUB_STEP_SUMMARY
          ls -lh ./deploy/*.jar >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚙️ Configure your deployment method below" >> $GITHUB_STEP_SUMMARY

      # TODO: Configure your deployment method
      #
      # Option 1: Deploy to remote server via SSH
      # - name: Deploy to server
      #   uses: appleboy/scp-action@v0.1.4
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     source: "./deploy/*.jar"
      #     target: "/opt/app/"
      #
      # Option 2: Deploy to Docker registry
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: your-registry/quiz-cms-backend:latest
      #
      # Option 3: Deploy to AWS/Azure/GCP
      # Add your cloud deployment steps here
